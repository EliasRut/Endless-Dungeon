/// <reference types="bun-types" />
/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
import http from "http";
import querystring from "querystring";
import EventEmitter from "events";
import { URL } from "url";
import { Socket } from "./Socket";
export declare class IncomingMessage extends EventEmitter {
    private req;
    private __url;
    private app;
    url: string;
    originalUrl: string;
    method: string;
    private _baseUrl;
    private _rawquery;
    private _query;
    private _headers;
    private _params;
    private _bodydata;
    private _rawbody;
    private _readableState;
    aborted: boolean;
    socket: Socket;
    constructor(req: Request, __url: URL, app: any);
    get ip(): void;
    set body(_body: any);
    get body(): any;
    get headers(): http.IncomingHttpHeaders;
    set params(value: {
        [name: string]: string;
    });
    get params(): {
        [name: string]: string;
    };
    get query(): querystring.ParsedUrlQuery;
    get baseUrl(): string;
    set baseUrl(baseUrl: string);
    get path(): string;
    get(name: string): string | string[];
    header(name: string): string | string[];
    accepts(...args: any[]): string | false;
    resume(): this;
    on(event: string | symbol, listener: (...args: any[]) => void): this;
    protected readBody(): Promise<void>;
}
