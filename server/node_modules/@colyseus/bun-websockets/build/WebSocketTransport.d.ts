/// <reference types="bun-types" />
/// <reference types="node" />
import Bun, { Server, ServerWebSocket, WebSocketHandler } from "bun";
import { Transport } from '@colyseus/core';
import { WebSocketWrapper } from './WebSocketClient';
export type TransportOptions = Partial<Omit<WebSocketHandler, "message" | "open" | "drain" | "close" | "ping" | "pong">>;
interface WebSocketData {
    url: URL;
}
export declare class uWebSocketsTransport extends Transport {
    private options;
    bunServer: Bun.Server;
    protected clients: ServerWebSocket<WebSocketData>[];
    protected clientWrappers: WeakMap<Bun.ServerWebSocket<WebSocketData>, WebSocketWrapper>;
    constructor(options?: TransportOptions);
    listen(port: number | string, hostname?: string, backlog?: number, listeningListener?: () => void): this;
    shutdown(): void;
    simulateLatency(milliseconds: number): void;
    protected onConnection(rawClient: ServerWebSocket<WebSocketData>): Promise<void>;
    protected handleMatchMakeRequest(req: Request, server: Server, url: URL): Promise<[number, string, {
        [key: string]: string;
    }]>;
}
export {};
